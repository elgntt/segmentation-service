// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/deps.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/elgntt/segmentation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentRepo is a mock of SegmentRepo interface.
type MockSegmentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRepoMockRecorder
}

// MockSegmentRepoMockRecorder is the mock recorder for MockSegmentRepo.
type MockSegmentRepoMockRecorder struct {
	mock *MockSegmentRepo
}

// NewMockSegmentRepo creates a new mock instance.
func NewMockSegmentRepo(ctrl *gomock.Controller) *MockSegmentRepo {
	mock := &MockSegmentRepo{ctrl: ctrl}
	mock.recorder = &MockSegmentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRepo) EXPECT() *MockSegmentRepoMockRecorder {
	return m.recorder
}

// AddMultipleUsersToSegment mocks base method.
func (m *MockSegmentRepo) AddMultipleUsersToSegment(ctx context.Context, segmentId int, usersIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultipleUsersToSegment", ctx, segmentId, usersIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMultipleUsersToSegment indicates an expected call of AddMultipleUsersToSegment.
func (mr *MockSegmentRepoMockRecorder) AddMultipleUsersToSegment(ctx, segmentId, usersIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultipleUsersToSegment", reflect.TypeOf((*MockSegmentRepo)(nil).AddMultipleUsersToSegment), ctx, segmentId, usersIDs)
}

// CreateSegment mocks base method.
func (m *MockSegmentRepo) CreateSegment(ctx context.Context, slug string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", ctx, slug)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentRepoMockRecorder) CreateSegment(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentRepo)(nil).CreateSegment), ctx, slug)
}

// DeleteSegment mocks base method.
func (m *MockSegmentRepo) DeleteSegment(ctx context.Context, slug string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, slug)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentRepoMockRecorder) DeleteSegment(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentRepo)(nil).DeleteSegment), ctx, slug)
}

// GetSegmentsBySlug mocks base method.
func (m *MockSegmentRepo) GetSegmentsBySlug(ctx context.Context, slugs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentsBySlug", ctx, slugs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentsBySlug indicates an expected call of GetSegmentsBySlug.
func (mr *MockSegmentRepoMockRecorder) GetSegmentsBySlug(ctx, slugs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentsBySlug", reflect.TypeOf((*MockSegmentRepo)(nil).GetSegmentsBySlug), ctx, slugs)
}

// RemoveUsersFromDeletedSegment mocks base method.
func (m *MockSegmentRepo) RemoveUsersFromDeletedSegment(ctx context.Context, sigmentId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUsersFromDeletedSegment", ctx, sigmentId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUsersFromDeletedSegment indicates an expected call of RemoveUsersFromDeletedSegment.
func (mr *MockSegmentRepoMockRecorder) RemoveUsersFromDeletedSegment(ctx, sigmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersFromDeletedSegment", reflect.TypeOf((*MockSegmentRepo)(nil).RemoveUsersFromDeletedSegment), ctx, sigmentId)
}

// MockHistoryRepo is a mock of HistoryRepo interface.
type MockHistoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepoMockRecorder
}

// MockHistoryRepoMockRecorder is the mock recorder for MockHistoryRepo.
type MockHistoryRepoMockRecorder struct {
	mock *MockHistoryRepo
}

// NewMockHistoryRepo creates a new mock instance.
func NewMockHistoryRepo(ctrl *gomock.Controller) *MockHistoryRepo {
	mock := &MockHistoryRepo{ctrl: ctrl}
	mock.recorder = &MockHistoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepo) EXPECT() *MockHistoryRepoMockRecorder {
	return m.recorder
}

// DeleteExpiredUserSegments mocks base method.
func (m *MockHistoryRepo) DeleteExpiredUserSegments(ctx context.Context) ([]model.UsersSegments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredUserSegments", ctx)
	ret0, _ := ret[0].([]model.UsersSegments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredUserSegments indicates an expected call of DeleteExpiredUserSegments.
func (mr *MockHistoryRepoMockRecorder) DeleteExpiredUserSegments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredUserSegments", reflect.TypeOf((*MockHistoryRepo)(nil).DeleteExpiredUserSegments), ctx)
}

// GetHistory mocks base method.
func (m *MockHistoryRepo) GetHistory(ctx context.Context, month, year, userId int) ([]model.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, month, year, userId)
	ret0, _ := ret[0].([]model.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockHistoryRepoMockRecorder) GetHistory(ctx, month, year, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockHistoryRepo)(nil).GetHistory), ctx, month, year, userId)
}

// RecordMultipleUsersToHistory mocks base method.
func (m *MockHistoryRepo) RecordMultipleUsersToHistory(ctx context.Context, historyData model.HistoryDataMultipleUsers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordMultipleUsersToHistory", ctx, historyData)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordMultipleUsersToHistory indicates an expected call of RecordMultipleUsersToHistory.
func (mr *MockHistoryRepoMockRecorder) RecordMultipleUsersToHistory(ctx, historyData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordMultipleUsersToHistory", reflect.TypeOf((*MockHistoryRepo)(nil).RecordMultipleUsersToHistory), ctx, historyData)
}

// RecordUserMultipleSegmentsToHistory mocks base method.
func (m *MockHistoryRepo) RecordUserMultipleSegmentsToHistory(ctx context.Context, historyData model.HistoryDataMultipleSegments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUserMultipleSegmentsToHistory", ctx, historyData)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUserMultipleSegmentsToHistory indicates an expected call of RecordUserMultipleSegmentsToHistory.
func (mr *MockHistoryRepoMockRecorder) RecordUserMultipleSegmentsToHistory(ctx, historyData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserMultipleSegmentsToHistory", reflect.TypeOf((*MockHistoryRepo)(nil).RecordUserMultipleSegmentsToHistory), ctx, historyData)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUserToMultipleSegments mocks base method.
func (m *MockUserRepo) AddUserToMultipleSegments(ctx context.Context, expirationTime *time.Time, segmentsSlugs []string, userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToMultipleSegments", ctx, expirationTime, segmentsSlugs, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToMultipleSegments indicates an expected call of AddUserToMultipleSegments.
func (mr *MockUserRepoMockRecorder) AddUserToMultipleSegments(ctx, expirationTime, segmentsSlugs, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToMultipleSegments", reflect.TypeOf((*MockUserRepo)(nil).AddUserToMultipleSegments), ctx, expirationTime, segmentsSlugs, userId)
}

// GetActiveUserSegments mocks base method.
func (m *MockUserRepo) GetActiveUserSegments(ctx context.Context, userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUserSegments", ctx, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUserSegments indicates an expected call of GetActiveUserSegments.
func (mr *MockUserRepoMockRecorder) GetActiveUserSegments(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUserSegments", reflect.TypeOf((*MockUserRepo)(nil).GetActiveUserSegments), ctx, userId)
}

// GetPercentUsers mocks base method.
func (m *MockUserRepo) GetPercentUsers(ctx context.Context, usersPercent int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPercentUsers", ctx, usersPercent)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPercentUsers indicates an expected call of GetPercentUsers.
func (mr *MockUserRepoMockRecorder) GetPercentUsers(ctx, usersPercent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPercentUsers", reflect.TypeOf((*MockUserRepo)(nil).GetPercentUsers), ctx, usersPercent)
}

// RemoveUserFromMultipleSegments mocks base method.
func (m *MockUserRepo) RemoveUserFromMultipleSegments(ctx context.Context, segmentsSlugsToRemove []string, userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromMultipleSegments", ctx, segmentsSlugsToRemove, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserFromMultipleSegments indicates an expected call of RemoveUserFromMultipleSegments.
func (mr *MockUserRepoMockRecorder) RemoveUserFromMultipleSegments(ctx, segmentsSlugsToRemove, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromMultipleSegments", reflect.TypeOf((*MockUserRepo)(nil).RemoveUserFromMultipleSegments), ctx, segmentsSlugsToRemove, userId)
}
